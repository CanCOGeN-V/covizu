import sys
import json
import argparse
from covizu.clustering import consensus
from Bio import Phylo
from io import StringIO


def parse_labels(handle):
    """ Parse labels CSV """
    _ = next(handle)  # skip header
    results = {}
    for line in handle:
        try:
            index, qname = line.strip().split(',')
        except:
            print("ERROR in parse_labels(): not a valid CSV file, expecting {index, qname}")
            raise
        if index not in results:
            results.update({index: []})
        results[index].append(qname)
    return results


def get_parents(tree):
    """ generate dictionary of child->parent associations """
    parents = {}
    for clade in tree.find_clades(order='level'):
        for child in clade:
            parents.update({child: clade})
    return parents


def collapse_polytomies(tree):
    """
    Excise branches with zero branch lengths
    :param tree:  Bio.Phylo object
    :return:  Bio.Phylo
    """
    # prune tips with zero branch length, use to label internal node
    parents = get_parents(tree)
    for tip in tree.get_terminals():
        if tip.branch_length > 0:
            continue
        parent = parents[tip]
        if parent.name is None:
            parent.name = tip.name
        else:
            parent.name = '|'.join([parent.name, tip.name])
        tree.prune(tip)

    parents = get_parents(tree)  # Clade objects may have been altered
    for node in tree.get_nonterminals():
        if node.branch_length > 0 or node == tree.root:
            continue

        # transfer child clades to parent
        parent = parents[node]
        parent.clades.remove(node)
        parent.clades.extend(node.clades)
        for child in node.clades:
            parents[child] = parent

        # transfer labels to parent
        if node.name:
            if parent.name is None:
                parent.name = node.name
            else:
                parent.name = '|'.join([parent.name, node.name])

    return tree


def make_beaddata(tree, label_file):
    """
    Extract beadplot node and edge information from NJ trees and labels generated by
    clustering.py: build_trees().  Each row of the beadplot corresponds to a "variant"
    that comprises genomes with identical feature vectors (clustering.py: get_sym_diffs()),
    AND any tips in the consensus NJ tree that are separated by zero branch lengths.
    Use tips with zero branch lengths to label internal nodes.
    For internal nodes that remain unlabelled, use the closest tip in time.

    :param tree:  Phylo.Clade, consensus tree
    :param label_file:  dict, lists of genome labels keyed by tree tip integer index
    :return:
    """

    # validate tree and labels
    index_label = parse_labels(label_file)
    tip_labels = set([tip.name for tip in tree.get_terminals()])
    set_diff = tip_labels.difference(set(index_label.keys()))
    if len(set_diff) > 0:
        print("ERROR: mismatch detected between tree and label file:")
        print(set_diff)
        sys.exit()

    tree = collapse_polytomies(tree)  # label internal nodes

    # update variant list from internal nodes
    

def serialize_tree(tree):
    """ Return Newick tree string """
    with StringIO() as handle:
        Phylo.write(ctree, handle, "newick")
        result = handle.getvalue()
    return result


def parse_args():
    """ Command line interface """
    parser = argparse.ArgumentParser(description="")
    parser.add_argument("tree", type=argparse.FileType('r'),
                        help="input, path to file with consensus tree or bootstrap trees")
    parser.add_argument("labels", type=argparse.FileType('r'),
                        help="input, path to file with sequence label to tip index map")
    parser.add_argument("--boot", action="store_true",
                        help="option, indicates that input file contains bootstrap trees")
    parser.add_argument("--cutoff", type=float, default=0.5,
                        help="option, if user sets --boot, specifies bootstrap support "
                             "threshold parameter (default 0.5)")
    return parser.parse_args()


if __name__ == "__main__":
    args = parse_args()
    if args.boot:
        trees = Phylo.parse(args.tree, 'newick')
        ctree = consensus(trees, cutoff=args.cutoff)
    else:
        try:
            ctree = Phylo.read(args.tree, 'newick')
        except:
            print("Detected multiple trees in file, handling as bootstrap")
            trees = Phylo.parse(args.tree, 'newick')
            ctree = consensus(trees, cutoff=args.cutoff)

    # DEBUGGING
    print(serialize_tree(ctree))

    collapsed = collapse_polytomies(ctree)
    print(serialize_tree(collapsed))
    #make_beaddata(ctree, args.labels)
